module MyApp.MyFunctions

doc """
Stet clita kasd gubergren, no sea takimata sanctus
est Lorem ipsum dolor sit amet.
"""

public fibonacci {
  doc """
  Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed
  diam nonumy eirmod tempor invidunt ut labore et dolore magna
  aliquyam erat, sed diam voluptua.
  """

  spec (number) { number }

  def (n) when n < 0 { error("fibonacci of negative number") }
  def (0) { 0 }
  def (1) { 1 }
  def (n) { fibonacci(n - 1) + fibonacci(n - 2) }

  test "base cases" {
    self(0) |> shouldBe(0)
    self(1) |> shouldbe(1)
  }

  test "larger numbers are calculated" {
    self(8) |> shouldbe(21)
  }

  test "errors with negative numbers" = {
    self(-3) |> shouldError("fibonacci of negative number")
  }
}

public any? {
  doc """
  Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
  """
  spec (list(n), &(n) { any }) { bool }

  def ([], _) {
    false
  }
  def ([h|t], f) {
    case f(h) {
      :false { self(t, f) }
      :nil   { self(t, f) }
      _      { :true }
    }
  }

  test "any even?" {
    self([1, 3, 5, 7, 8, 9], &even/1) |> shouldBe(:true)
  }

  test "any something else" {
    self([1, 3, 5, 7, 8, 9], &(x) { x < 10 }) |> shouldBe(:false)
  }
}

private rev {
  def (n) { :lists.reverse(n) }

  test "2 item list" {
    self([1, 2]) |> shouldBe([2, 1)
  }
}
